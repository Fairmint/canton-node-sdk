version: 2.1

# ============================================================================
# EXECUTORS
# ============================================================================
executors:
  node-docker:
    docker:
      - image: cimg/node:20.18
    resource_class: large
    environment:
      NODE_ENV: test

  # Machine executor needed for Docker-in-Docker support
  ubuntu-machine:
    machine:
      image: ubuntu-2404:2024.05.1
    resource_class: large
    environment:
      NODE_ENV: test

# ============================================================================
# COMMANDS
# ============================================================================
commands:
  restore_node_modules:
    description: 'Restore node_modules from cache'
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

  save_node_modules:
    description: 'Save node_modules to cache'
    steps:
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

  setup_localnet:
    description: 'Download and setup Splice LocalNet'
    parameters:
      version:
        type: string
        default: '0.4.22'
    steps:
      - run:
          name: Download Splice LocalNet Bundle
          command: |
            cd /tmp
            SPLICE_VERSION=<< parameters.version >>

            # Download the Splice release bundle
            echo "Downloading Splice version ${SPLICE_VERSION}..."
            curl -L "https://github.com/digital-asset/splice/releases/download/v${SPLICE_VERSION}/${SPLICE_VERSION}_splice-node.tar.gz" \
              -o splice-node.tar.gz

            # Extract the bundle
            echo "Extracting bundle..."
            tar xzvf splice-node.tar.gz

            # Export the LocalNet directory path
            echo "export LOCALNET_DIR=/tmp/splice-node/docker-compose/localnet" >> $BASH_ENV
            echo "export IMAGE_TAG=${SPLICE_VERSION}" >> $BASH_ENV

            echo "LocalNet setup complete"
            ls -la /tmp/splice-node/docker-compose/localnet

      - run:
          name: Verify LocalNet Files
          command: |
            source $BASH_ENV
            echo "LOCALNET_DIR: $LOCALNET_DIR"
            echo "IMAGE_TAG: $IMAGE_TAG"

            if [ ! -d "$LOCALNET_DIR" ]; then
              echo "ERROR: LocalNet directory not found at $LOCALNET_DIR"
              exit 1
            fi

            if [ ! -f "$LOCALNET_DIR/compose.yaml" ]; then
              echo "ERROR: compose.yaml not found"
              exit 1
            fi

            echo "✓ LocalNet files verified"

  start_localnet:
    description: 'Start Splice LocalNet services'
    steps:
      - run:
          name: Start LocalNet
          command: |
            source $BASH_ENV

            echo "Starting LocalNet with the following configuration:"
            echo "  LOCALNET_DIR: $LOCALNET_DIR"
            echo "  IMAGE_TAG: $IMAGE_TAG"

            # Start LocalNet services
            docker compose \
              --env-file $LOCALNET_DIR/compose.env \
              --env-file $LOCALNET_DIR/env/common.env \
              -f $LOCALNET_DIR/compose.yaml \
              -f $LOCALNET_DIR/resource-constraints.yaml \
              --profile sv \
              --profile app-provider \
              --profile app-user \
              up -d

            echo "Waiting for services to be healthy..."
            sleep 30

            # Check service status
            docker compose \
              --env-file $LOCALNET_DIR/compose.env \
              --env-file $LOCALNET_DIR/env/common.env \
              -f $LOCALNET_DIR/compose.yaml \
              -f $LOCALNET_DIR/resource-constraints.yaml \
              --profile sv \
              --profile app-provider \
              --profile app-user \
              ps

      - run:
          name: Wait for LocalNet to be Ready
          command: |
            source $BASH_ENV

            # Wait for the JSON API endpoints to be available
            MAX_RETRIES=60
            RETRY_COUNT=0

            # Check app-provider JSON API (port 39750)
            echo "Checking app-provider JSON API..."
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -f -s http://localhost:39750/livez > /dev/null 2>&1; then
                echo "✓ App-provider JSON API is ready"
                break
              fi
              echo "Waiting for app-provider JSON API... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT + 1))
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "ERROR: LocalNet failed to become ready"
              docker compose \
                --env-file $LOCALNET_DIR/compose.env \
                --env-file $LOCALNET_DIR/env/common.env \
                -f $LOCALNET_DIR/compose.yaml \
                -f $LOCALNET_DIR/resource-constraints.yaml \
                --profile sv \
                --profile app-provider \
                --profile app-user \
                logs
              exit 1
            fi

            echo "✓ LocalNet is ready for testing"

  stop_localnet:
    description: 'Stop Splice LocalNet services'
    steps:
      - run:
          name: Stop LocalNet
          command: |
            source $BASH_ENV || true

            if [ -z "$LOCALNET_DIR" ]; then
              echo "LOCALNET_DIR not set, skipping cleanup"
              exit 0
            fi

            echo "Stopping LocalNet services..."
            docker compose \
              --env-file $LOCALNET_DIR/compose.env \
              --env-file $LOCALNET_DIR/env/common.env \
              -f $LOCALNET_DIR/compose.yaml \
              -f $LOCALNET_DIR/resource-constraints.yaml \
              --profile sv \
              --profile app-provider \
              --profile app-user \
              down -v || true

            echo "LocalNet stopped"
          when: always

  show_localnet_logs:
    description: 'Show LocalNet logs on failure'
    steps:
      - run:
          name: Show LocalNet Logs
          command: |
            source $BASH_ENV || true

            if [ -z "$LOCALNET_DIR" ]; then
              echo "LOCALNET_DIR not set, skipping logs"
              exit 0
            fi

            echo "==================== LocalNet Logs ===================="
            docker compose \
              --env-file $LOCALNET_DIR/compose.env \
              --env-file $LOCALNET_DIR/env/common.env \
              -f $LOCALNET_DIR/compose.yaml \
              -f $LOCALNET_DIR/resource-constraints.yaml \
              --profile sv \
              --profile app-provider \
              --profile app-user \
              logs --tail=100 || true
          when: on_fail

# ============================================================================
# JOBS
# ============================================================================
jobs:
  # Standard unit tests (no LocalNet required)
  test:
    executor: node-docker
    steps:
      - checkout
      - restore_node_modules
      - run:
          name: Install Dependencies
          command: npm install
      - save_node_modules
      - run:
          name: Clone Splice Artifacts
          command: npm run artifacts:clone-splice
      - run:
          name: Run Unit Tests
          command: npm test
      - run:
          name: Type Check
          command: npm run build:core

  # Code quality checks
  lint:
    executor: node-docker
    steps:
      - checkout
      - restore_node_modules
      - run:
          name: Install Dependencies
          command: npm install
      - save_node_modules
      - run:
          name: Clone Splice Artifacts
          command: npm run artifacts:clone-splice
      - run:
          name: Run Linter
          command: npm run lint
      - run:
          name: Check Formatting
          command: npm run format

  # Integration tests with LocalNet
  test-localnet:
    executor: ubuntu-machine
    steps:
      - checkout

      # Setup Node.js
      - run:
          name: Install Node.js
          command: |
            # Install nvm
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Install Node.js 20
            nvm install 20
            nvm use 20

            # Make Node.js available in BASH_ENV
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      # Install dependencies
      - restore_node_modules
      - run:
          name: Install Dependencies
          command: |
            source $BASH_ENV
            npm install
      - save_node_modules
      # Clone Splice artifacts for type generation
      - run:
          name: Clone Splice Artifacts
          command: |
            source $BASH_ENV
            npm run artifacts:clone-splice

      # Setup and start LocalNet
      - setup_localnet:
          version: '0.4.22'
      - start_localnet

      # Create LocalNet environment configuration
      - run:
          name: Create LocalNet .env Configuration
          command: |
            source $BASH_ENV

            cat > .env.localnet \<< 'EOF'
            DOTENV_CONFIG_QUIET=true

            # LocalNet Configuration for CI
            CANTON_CURRENT_NETWORK=localnet
            CANTON_CURRENT_PROVIDER=app-provider

            # App Provider Configuration
            # Based on LocalNet default ports: 3${PORT_SUFFIX}
            # JSON API Port: 39750 (3 + 9750)
            # Validator API Port: 39030 (3 + 9030)
            CANTON_LOCALNET_APP_PROVIDER_LEDGER_JSON_API_URI=http://localhost:39750
            CANTON_LOCALNET_APP_PROVIDER_LEDGER_JSON_API_CLIENT_ID=admin
            CANTON_LOCALNET_APP_PROVIDER_LEDGER_JSON_API_CLIENT_SECRET=admin

            CANTON_LOCALNET_APP_PROVIDER_VALIDATOR_API_URI=http://localhost:39030
            CANTON_LOCALNET_APP_PROVIDER_VALIDATOR_API_CLIENT_ID=admin
            CANTON_LOCALNET_APP_PROVIDER_VALIDATOR_API_CLIENT_SECRET=admin

            CANTON_LOCALNET_APP_PROVIDER_SCAN_API_URI=http://localhost:4000/api/scan
            CANTON_LOCALNET_APP_PROVIDER_SCAN_API_CLIENT_ID=admin
            CANTON_LOCALNET_APP_PROVIDER_SCAN_API_CLIENT_SECRET=admin

            # Auth URL (LocalNet doesn't use real OAuth, but we need to set something)
            CANTON_LOCALNET_APP_PROVIDER_AUTH_URL=http://localhost:3000/auth

            # Party and User IDs (will be discovered at runtime)
            CANTON_LOCALNET_APP_PROVIDER_PARTY_ID=app-provider::1220a1b2c3d4e5f6
            CANTON_LOCALNET_APP_PROVIDER_USER_ID=app-provider

            # Contract IDs (these may need to be discovered from LocalNet)
            CANTON_VALIDATOR_WALLET_APP_INSTALL_CONTRACT_ID_LOCALNET=placeholder
            EOF

            # Use the LocalNet environment
            cp .env.localnet .env

            echo "✓ LocalNet .env configuration created"

      # Build the SDK
      - run:
          name: Build SDK
          command: |
            source $BASH_ENV
            npm run build:core

      # Run regression tests (simulations)
      - run:
          name: Run Regression Tests (Simulations)
          command: |
            source $BASH_ENV

            echo "Running SDK simulations against LocalNet..."
            npm run simulate

            echo "✓ All regression tests passed"
          no_output_timeout: 10m

      # Save test results
      - store_artifacts:
          path: simulations/results
          destination: simulation-results

      # Show logs on failure and cleanup
      - show_localnet_logs
      - stop_localnet

# ============================================================================
# WORKFLOWS
# ============================================================================
workflows:
  version: 2

  # Main workflow - runs on every commit
  build-test:
    jobs:
      - lint
      - test
      - test-localnet:
          requires:
            - lint
            - test

  # Nightly regression tests
  nightly-regression:
    triggers:
      - schedule:
          cron: '0 2 * * *' # Run at 2 AM UTC daily
          filters:
            branches:
              only:
                - main
                - master
    jobs:
      - test-localnet
